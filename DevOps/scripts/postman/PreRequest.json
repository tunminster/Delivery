{
    "listen": "prerequest",
    "script": {
      "exec": [
        "// insert any pre-request logic here",
        "let headerKey = 'Request-Id'",
        "let headerValue = pm.variables.get(headerKey)",
        "if(!headerValue){",
        "    var uuid = require('uuid')",
        "    headerValue = uuid.v4()",
        "}",
        "",
        "console.log('Using correlation id ' + headerValue)",
        "pm.variables.set(headerKey, headerValue)",
        "",
        "// generate OAuth bearer token",
        "function parseJwt (token) {",
        "    var base64Url = token.split('.')[1];",
        "    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
        "    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {",
        "        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
        "    }).join(''));",
        "    return JSON.parse(jsonPayload);",
        "};",
        "",
        "var jwt = pm.variables.get('bearerToken');",
        "var refreshToken = true;",
        "try {",
        "    if (null !== jwt && '' !== jwt) {",
        "        jwt = parseJwt(jwt);",
        "        if (Date.now() < jwt.exp * 1000) {",
        "            refreshToken = false;",
        "        }",
        "    }",
        "} catch {",
        "    console.info('Failed to validate refreshToken expiration');",
        "}",
        "",
        "if (!refreshToken) {",
        "    console.info('Reusing cached token');",
        "    return;",
        "}",
        "",
        "//get a new token",
        "console.info('Getting a new token');",
        "const tokenUrl = pm.environment.get('authorizationTokenEndpoint');",
        "if(!tokenUrl){",
        "    throw new Error('No valid authorizationTokenEndpoint variable has been set. Ensure that the environment being used has been initialized with valid Okta values');",
        "}",
        "const clientId = pm.environment.get('authorizationClientId');",
        "if(!clientId || clientId == 'YOUR-CLIENT-ID'){",
        "    throw new Error('No valid clientId variable has been set. Ensure that the environment being used has been initialized with valid Okta values');",
        "}",
        "const clientSecret = pm.environment.get('authorizationClientSecret');",
        "if(!clientSecret || clientSecret == 'YOUR-CLIENT-SECRET'){",
        "    throw new Error('No valid clientSecret variable has been set. Ensure that the environment being used has been initialized with valid Okta values');",
        "}",
        "const scopes = pm.environment.get('authorizationScopes');",
        "if(!scopes){",
        "    throw new Error('No valid scopes variable has been set. Ensure that the environment being used has been initialized with valid Okta values');",
        "}",
        "",
        "const authorization = btoa(clientId + ':' + clientSecret);",
        "const getTokenRequest = {",
        "    method: 'POST',",
        "    url: tokenUrl,",
        "    header: {",
        "        'Authorization': 'Basic ' + authorization,",
        "        'Content-Type': 'application/x-www-form-urlencoded',",
        "    },",
        "    body: 'grant_type=client_credentials&scope=' + encodeURIComponent(scopes)",
        "};",
        "",
        "pm.sendRequest(getTokenRequest, (err, response) => {",
        "    const newAccessToken = response.json().access_token;",
        "    pm.environment.set('bearerToken', newAccessToken);",
        "});"
      ],
      "type": "text/javascript"
    }
  }