parameters:
- name: terraformFilesDirectory
  type: string
- name: environment
  type: string

steps:

  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Tokenize terraform files'
    inputs:
      rootDirectory: '${{ parameters.terraformFilesDirectory }}'
      targetFiles: '**/*.tf*'
      writeBOM: false
      actionOnMissing: 'fail'

  - bash: |
      terraform init \
      -backend-config="storage_account_name=$TF_STATE_BLOB_ACCOUNT_NAME" \
      -backend-config="container_name=$TF_STATE_BLOB_CONTAINER_NAME" \
      -backend-config="key=$TF_STATE_BLOB_FILE" \
      -backend-config="access_key=$TF_STATE_BLOB_Access_TOKEN"
    displayName: Terraform Init
    workingDirectory: '$(System.DefaultWorkingDirectory)/DevOps/Infrastructures/api-management'
    env:
      ARM_CLIENT_ID: $(app-dev-client-id)
      ARM_CLIENT_SECRET: $(app-dev-secret)
      ARM_SUBSCRIPTION_ID: $(app-dev-subscription-id)
      ARM_TENANT_ID: $(app-dev-tenant-id)
      TF_STATE_BLOB_ACCOUNT_NAME:   $(tf-state-account-name)
      TF_STATE_BLOB_CONTAINER_NAME: $(tf-state-blob-container)
      TF_STATE_BLOB_FILE:           $(tf-apis-state-blob-fille)
      TF_STATE_BLOB_Access_TOKEN:   $(tf-state-access-token)

  - task: Bash@3
    displayName: 'Validate terraform'
    inputs:
      targetType: 'inline'
      script: 'terraform validate'
      workingDirectory: '$(System.DefaultWorkingDirectory)/DevOps/Infrastructures/api-management' 

  - task: Bash@3
    displayName: 'Plan terraform'
    inputs:
      targetType: 'inline'
      #script: 'terraform plan -var-file=$(tfvarfile) -input=false --refresh-only'
      script: 'terraform plan -var-file=$(tfvarfile) -input=false'
      workingDirectory: '$(System.DefaultWorkingDirectory)/DevOps/Infrastructures/api-management' 
    env:
      ARM_CLIENT_ID: $(app-dev-client-id)
      ARM_CLIENT_SECRET: $(app-dev-secret)
      ARM_SUBSCRIPTION_ID: $(app-dev-subscription-id)
      ARM_TENANT_ID: $(app-dev-tenant-id)

      allowTelemetryCollection: true

  # - task: Bash@3
  #   displayName: 'Apply terraform'
  #   inputs:
  #     targetType: inline
  #     script: 'terraform apply -var-file=$(tfvarfile) -input=false -auto-approve'
  #     workingDirectory: '$(System.DefaultWorkingDirectory)/DevOps/Infrastructures/api-management' 
  #   env:
  #     ARM_CLIENT_ID: $(app-dev-client-id)
  #     ARM_CLIENT_SECRET: $(app-dev-secret)
  #     ARM_SUBSCRIPTION_ID: $(app-dev-subscription-id)
  #     ARM_TENANT_ID: $(app-dev-tenant-id)