using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Delivery.Azure.Library.Core.Guards
{
    /// <summary>
	///     Provides methods which enforce that the arguments supplied to a method are set
	/// </summary>
	public static class Guard
	{
		/// <summary>
		///     Verifies if a collection is not null or empty
		/// </summary>
		/// <typeparam name="TItem">Type of the items</typeparam>
		/// <param name="items">Collection of items</param>
		/// <param name="parameterName">Name of the parameter</param>
		/// <param name="callerMemberName">Information about the source of the issue. It is autogenerated so should not be supplied</param>
		/// <param name="callerFilePath">Information about the source of the issue. It is autogenerated so should not be supplied</param>
		/// <param name="callerLineNumber">Information about the source of the issue. It is autogenerated so should not be supplied</param>
		public static void AgainstEmptyCollection<TItem>(IEnumerable<TItem> items, string parameterName, [CallerMemberName] string? callerMemberName = null, [CallerFilePath] string? callerFilePath = null, [CallerLineNumber] int callerLineNumber = default)
		{
			if (!items.Any())
			{
				throw new ArgumentException($"{parameterName} was not supplied to {callerMemberName} (at {callerFilePath}: {callerLineNumber})");
			}
		}

		/// <summary>
		///     Verifies if a specific criteria is met
		/// </summary>
		/// <param name="criteria">Criteria to guard for</param>
		/// <param name="parameterName">Name of the parameter</param>
		/// <param name="callerMemberName">Information about the source of the issue. It is autogenerated so should not be supplied</param>
		/// <param name="callerFilePath">Information about the source of the issue. It is autogenerated so should not be supplied</param>
		/// <param name="callerLineNumber">Information about the source of the issue. It is autogenerated so should not be supplied</param>
		public static void Against(bool criteria, string parameterName, [CallerMemberName] string? callerMemberName = null, [CallerFilePath] string? callerFilePath = null, [CallerLineNumber] int callerLineNumber = default)
		{
			if (criteria)
			{
				throw new ArgumentException($"{parameterName} failed criteria from {callerMemberName} (at {callerFilePath}: {callerLineNumber})");
			}
		}
	}
}