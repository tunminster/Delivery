# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  tag: '$(Build.BuildId)'
  imageRepository: 'delivery-api-$(Build.SourceBranchName)'

stages:
  - stage: Build
    displayName: Build project and Test

    jobs:
      - job: Build
        displayName: 'Build Project'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: UseDotNet@2
          displayName: 'Install .Net Core 3.1'
          inputs:
            packageType: 'sdk'
            version: '3.1.100'
            installationPath: $(Agent.ToolsDirectory)/dotnet
        - task: NuGetToolInstaller@1
          displayName: 'Install Nuget Tool'  
          inputs: 
            checkLatest: true

        - task: DotNetCoreCLI@2
          displayName: Restore
          inputs:
            command: restore
            projects: '**/*.csproj'
        - task: DotNetCoreCLI@2
          displayName: Build Projects
          inputs: 
            projects: '**/*.csproj'
            arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        - task: DotNetCoreCLI@2
          displayName: 'Run Unit Tests'
          inputs:
            command: test
            projects: '**/*[Tt]ests/*.csproj'
            arguments: --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

  - stage: DeployDev
    displayName: Deploy Development Env
    dependsOn: Build
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

    variables:
        repository-image: 'pngoacr.azurecr.io/delivery-api-$(Build.SourceBranchName):$(Build.BuildId)'
        acr-secret-name: 'hn-prod-acr-secret'
        appsettings-secret-name: 'delivery-api-appsettings-secret'
        host-url: 'delivery-api.harveynetwork.com'
        file-storage-account-name: 'pngosa'
        file-path: 'deliver-api/prod.appsettings.secret.json'
        dest-path: '/devops/appsettings.secret.json'
        dbContext: 'ApplicationDbContext'
        scriptName: 'migrationscript'
        env-name: 'Development'
        env-namespace: 'hn-prod'

    jobs:
      - job: DeployApiApp
        displayName: Deploy Api App
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '17.09.0-ce'

          - task: UseDotNet@2
            displayName: 'Install .Net Core 3.1'
            inputs:
              packageType: 'sdk'
              version: '3.1.100'
              installationPath: $(Agent.ToolsDirectory)/dotnet    
              
          - script: 'dotnet tool install -g dotnet-ef --version 3.1.3'
            displayName: dotnet tool install    
          - task: Docker@2
            inputs:
              containerRegistry: 'hn-acr-connection'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '**/Delivery.Api/Dockerfile'
              buildContext: .
              tags: |
                $(tag)
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/DevOps'
              Contents: 'delivery-api-deploy.yaml'  
              TargetFolder: '$(Build.ArtifactStagingDirectory)/devops'
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in deploy file'
            inputs:
              rootDirectory: '$(Build.ArtifactStagingDirectory)/devops'
              targetFiles: 'delivery-api-deploy.yaml'
              escapeType: none 

          - script: 'cat $(Build.ArtifactStagingDirectory)/devops/delivery-api-deploy.yaml'
            displayName: 'Cat deploy'

          - task: AzureCLI@2
            displayName: 'Download appsetting'
            inputs:
              azureSubscription: 'Pay-As-You-Go(2359b88d-3130-4c42-a9fb-2455697edb51)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az storage file download --account-name $(file-storage-account-name) --account-key $(file-storage-account-key) --share-name hn-prod --path $(file-path) --dest $(Build.ArtifactStagingDirectory)$(dest-path) --output none'

          # - script: 'dotnet ef migrations script --output $(Build.ArtifactStagingDirectory)/$(scriptName)  --context $(dbContext)  --idempotent'
          #   workingDirectory: Delivery.Api
          #   displayName: 'EF Migration'  

          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: 'latest'  

          # - task: SqlAzureDacpacDeployment@1
          #   inputs:
          #     azureSubscription: 'Pay-As-You-Go(2359b88d-3130-4c42-a9fb-2455697edb51)'
          #     AuthenticationType: 'connectionString'
          #     ConnectionString: '$(system.SQLConnectionString)'
          #     deployType: 'SqlTask'
          #     SqlFile: '$(Build.ArtifactStagingDirectory)/$(scriptName).sql'
          #     IpDetectionMethod: 'AutoDetect'
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'hn-aks-ns-prod'
              namespace: 'hn-prod'
              command: 
              secretType: 'generic'
              secretArguments: '--from-file=$(Build.ArtifactStagingDirectory)/devops/appsettings.secret.json'
              secretName: '$(appsettings-secret-name)'

          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'hn-aks-ns-prod'
              namespace: 'hn-prod'
              command: 'apply'
              arguments: '-f $(Build.ArtifactStagingDirectory)/devops/delivery-api-deploy.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Container Registry'
              dockerRegistryEndpoint: 'hn-acr-connection'
              secretName: 'hn-prod-acr-secret'               
