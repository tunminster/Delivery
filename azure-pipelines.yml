# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

parameters:
  - name: RunInfraProvisionStage
    displayName: Run Infra Provisioning
    type: boolean
    default: false

trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  tag: '$(Build.BuildId)'
  imageRepository: 'delivery-api-$(Build.SourceBranchName)'

stages:
  - stage: Build
    displayName: Build project and Test

    jobs:
      - job: Build
        displayName: 'Build Project'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: UseDotNet@2
          displayName: 'Install .Net Core SDK'
          inputs:
            version: '5.0.x'
            performMultiLevelLookup: true
            includePreviewVersions: true
            installationPath: $(Agent.ToolsDirectory)/dotnet
        - task: NuGetToolInstaller@1
          displayName: 'Install Nuget Tool'  
          inputs: 
            checkLatest: true

        - task: DotNetCoreCLI@2
          displayName: Restore
          inputs:
            command: restore
            projects: '**/*.csproj'
        - task: DotNetCoreCLI@2
          displayName: Build Projects
          inputs: 
            projects: '**/*.csproj'
            arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        - task: DotNetCoreCLI@2
          displayName: 'Run Unit Tests'
          inputs:
            command: test
            projects: '**/*[Tt]ests/*.csproj'
            arguments: --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
            
  - stage: InfraProvisions
    displayName: Deploy infrastructure provisions
    dependsOn: Build
    condition: succeeded()
    variables:
        - group: Hn-Platform-Infra-Variables
        - group: Hn-Platform-Infra
    jobs:
      - job: InfraProvisions
        displayName: Infra provisions
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: echo '$(hn-platform-environment-ServiceName)'
          - task: replacetokens@3
            inputs:
              targetFiles: '**/*.tfvars'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
              useLegacyPattern: false
              enableTelemetry: true
              
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                
                cat secret.tfvars
              workingDirectory: '$(System.DefaultWorkingDirectory)/DevOps/Infrastructures/provisions/variables'

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/DevOps/Infrastructures/provisions'
              backendType: 'azurerm'
              backendServiceArm: 'hn-platform-az-connection'
              backendAzureRmResourceGroupName: 'pngo_vn_rg'
              backendAzureRmStorageAccountName: 'pngosa'
              backendAzureRmContainerName: 'platform-tf-state-container'
              backendAzureRmKey: 'platform-tf-state.tfstate'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            inputs:
              command: 'validate'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            inputs:
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/DevOps/Infrastructures/provisions'
              environmentServiceName: 'hn-platform-az-Connection'
              commandOptions: '-var-file=$(tfvarfile) -input=false'
              allowTelemetryCollection: true
          - task: TerraformCLI@0
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/DevOps/Infrastructures/provisions'
              environmentServiceName: 'hn-platform-az-Connection'
              commandOptions: '-var-file=$(tfvarfile) -input=false -auto-approve'
              allowTelemetryCollection: true
        
  - stage: DeployDev
    displayName: Deploy Development Env
    dependsOn: InfraProvisions
    #condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

    variables:
        - group: Hn-Platform-Infra-Variables
        - group: hn-platform-dev
        - name: repository-image
          value: 'pngoacr.azurecr.io/delivery-api-$(Build.SourceBranchName):$(Build.BuildId)'
        - name: acr-secret-name
          value: 'hn-prod-acr-secret'
        - name: appsettings-secret-name
          value: 'delivery-api-appsettings-secret'
        - name: host-url
          value: 'delivery-api.harveynetwork.com'
        - name: file-storage-account-name
          value: 'pngosa'
        - name: file-path
          value: 'deliver-api/prod.appsettings.secret.json'
        - name: dest-path
          value: '/devops/appsettings.secret.json'
        - name: dbContext
          value: 'ApplicationDbContext'
        - name: scriptName
          value: 'migrationscript'
        - name: env-name
          value: 'dev'
        - name: env-namespace
          value: 'hn-prod'

    jobs:
      - job: DeployApiApp
        displayName: Deploy Api App
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '17.09.0-ce'

          - task: UseDotNet@2
            displayName: 'Install .Net Core 5'
            inputs:
              version: '5.0.x'
              performMultiLevelLookup: true
              includePreviewVersions: true
              installationPath: $(Agent.ToolsDirectory)/dotnet    
              
          - script: 'dotnet tool install -g dotnet-ef --version 3.1.3'
            displayName: dotnet tool install    
          - task: Docker@2
            inputs:
              containerRegistry: 'hn-acr-connection'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '**/Delivery.Api/Dockerfile'
              buildContext: .
              tags: |
                $(tag)
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/DevOps'
              Contents: 'delivery-api-deploy.yaml'  
              TargetFolder: '$(Build.ArtifactStagingDirectory)/devops'
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in deploy file'
            inputs:
              rootDirectory: '$(Build.ArtifactStagingDirectory)/devops'
              targetFiles: 'delivery-api-deploy.yaml'
              escapeType: none 

          - script: 'cat $(Build.ArtifactStagingDirectory)/devops/delivery-api-deploy.yaml'
            displayName: 'Cat deploy'

          - task: AzureCLI@2
            displayName: 'Download appsetting'
            inputs:
              azureSubscription: 'Pay-As-You-Go(2359b88d-3130-4c42-a9fb-2455697edb51)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az storage file download --account-name $(file-storage-account-name) --account-key $(file-storage-account-key) --share-name hn-prod --path $(file-path) --dest $(Build.ArtifactStagingDirectory)$(dest-path) --output none'

          # - script: 'dotnet ef migrations script --output $(Build.ArtifactStagingDirectory)/$(scriptName)  --context $(dbContext)  --idempotent'
          #   workingDirectory: Delivery.Api
          #   displayName: 'EF Migration'  

          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: 'latest'  

          # - task: SqlAzureDacpacDeployment@1
          #   inputs:
          #     azureSubscription: 'Pay-As-You-Go(2359b88d-3130-4c42-a9fb-2455697edb51)'
          #     AuthenticationType: 'connectionString'
          #     ConnectionString: '$(system.SQLConnectionString)'
          #     deployType: 'SqlTask'
          #     SqlFile: '$(Build.ArtifactStagingDirectory)/$(scriptName).sql'
          #     IpDetectionMethod: 'AutoDetect'
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'hn-aks-ns-prod'
              namespace: 'hn-prod'
              command: 
              secretType: 'generic'
              secretArguments: '--from-file=$(Build.ArtifactStagingDirectory)/devops/appsettings.secret.json'
              secretName: '$(appsettings-secret-name)'

          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'hn-aks-ns-prod'
              namespace: 'hn-prod'
              command: 'apply'
              arguments: '-f $(Build.ArtifactStagingDirectory)/devops/delivery-api-deploy.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Container Registry'
              dockerRegistryEndpoint: 'hn-acr-connection'
              secretName: 'hn-prod-acr-secret'               
      - job: DeployOrdersService
        displayName: Deploy Orders Service
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '19.03.14'
          - task: UseDotNet@2
            displayName: 'Install .Net Core 5'
            inputs:
              version: '5.0.x'
              performMultiLevelLookup: true
              includePreviewVersions: true
              installationPath: $(Agent.ToolsDirectory)/dotnet
          - task: Docker@2
            inputs:
              containerRegistry: 'hn-acr-connection'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '**/Delivery.Orders.Host/Dockerfile'
              buildContext: .
              tags: |
                $(tag)
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/DevOps/templates'
              Contents: 'values.yaml'  
              TargetFolder: '$(Build.ArtifactStagingDirectory)/devops/templates'
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/DevOps/templates/config-maps'
              Contents: '*'  
              TargetFolder: '$(Build.ArtifactStagingDirectory)/devops/templates/config-maps'
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in deploy file'
            inputs:
              rootDirectory: '$(Build.ArtifactStagingDirectory)/devops/templates'
              targetFiles: 'values.yaml'
              escapeType: none      
          
          - script: 'cat $(Build.ArtifactStagingDirectory)/devops/templates/values.yaml'
            displayName: 'Cat deploy'

          - script: 'cat $(Build.ArtifactStagingDirectory)/devops/templates/config-maps/config-map-orders.yaml'
            displayName: 'Cat deploy'
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/DevOps'
              Contents: 'orders-service-deploy.yaml'  
              TargetFolder: '$(Build.ArtifactStagingDirectory)/devops'
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in deploy file'
            inputs:
              rootDirectory: '$(Build.ArtifactStagingDirectory)/devops'
              targetFiles: 'orders-service-deploy.yaml'
              escapeType: none
          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: 'latest'
          - task: Kubernetes@1
            displayName: 'Deploy orders service config-map'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'hn-aks-ns-prod'
              namespace: 'hn-prod'
              command: 'apply'
              arguments: '-f $(Build.ArtifactStagingDirectory)/devops/templates/config-maps/config-map-orders.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: 'Deploy orders service'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'hn-aks-ns-prod'
              namespace: 'hn-prod'
              command: 'apply'
              arguments: '-f $(Build.ArtifactStagingDirectory)/devops/orders-service-deploy.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'